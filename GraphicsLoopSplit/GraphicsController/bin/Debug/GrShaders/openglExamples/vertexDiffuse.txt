#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 normal;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

out vec3 Normal;
out vec3 FragPosition;

void main()
{
    gl_Position = projection * view * model * vec4(aPos, 1.0f);
	//Normal = normal;
	//Warning: this is an expensive calculation and should only be used
	//if non-uniform scaling is used. Otherwise it should be done on the CPU
	//because it occurs for each vertex
	Normal = mat3(transpose(inverse(model))) * normal;
	FragPosition = vec3(model * vec4(aPos, 1.0));
}