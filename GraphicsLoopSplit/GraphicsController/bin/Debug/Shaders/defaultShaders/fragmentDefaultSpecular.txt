#version 330 core

struct Material{
	vec3 ambient;
	vec3 diffuse;
	sampler2D texture_diffuse1;
	vec3 specular;
	sampler2D texture_specular1;
	float shininess;
};

//Now, since we're lighting the object with a directional light, we don't need a position\
//only a direction
struct Light{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	
	float constant;
	float linear;
	float quadratic;
};


out vec4 color;

in vec3 Normal;
in vec3 FragPosition;
in vec2 TexCoords;

uniform vec3 viewPosition;
uniform Material material;
uniform Light light;

uniform bool hasDMap;
uniform bool hasSMap;


void main()
{
	//ambient
	//If there's a texture: someLight.ambient * vec3(texture(material.diffuseMap, TexCoords));
	
	//vec3 ambient = material.ambient * light.ambient;
	vec3 ambient = light.ambient * vec3(texture(material.texture_diffuse1, TexCoords));
		
	//diffuse
	vec3 norm = normalize(Normal);
	vec3 lightDirection = normalize(light.position - FragPosition);
	//vec3 lightDirection = normalize(-light.direction);
	float diff = max(dot(norm, lightDirection), 0.0);
	//vec3 diffuse = (diff * material.diffuse) * light.diffuse;
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.texture_diffuse1, TexCoords));
	
	//specular
	vec3 viewDir = normalize(viewPosition - FragPosition);
	vec3 reflectDir = reflect(-lightDirection, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	//vec3 specular = (material.specular * spec) * light.specular;
	vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, TexCoords));
	
	//point light specifics
	float distance = length(light.position - FragPosition);
	float attenuation = 1.0f/(light.constant + light.linear * distance + light.quadratic * (distance * distance));
	ambient *= attenuation;
	specular *= attenuation;
	diffuse *= attenuation;
	
	float alpha = vec4(texture(material.texture_diffuse1, TexCoords)).w;
	vec3 result = ambient + diffuse + specular;
	color = vec4(result, alpha);
}