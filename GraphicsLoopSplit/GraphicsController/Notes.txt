Now that model loading is started, we want to initiate and manage the load from c#,
and we want the method to load it return an ID that corresponds to its index in a 
global c++ vector of models (which will later be converted to meshes)

More precisely, and perhaps this is what we should first endeavor to do:
We want c++ to return a complex struct that we will intrepret (in c#) as a 
SceneObject, our own variant of the GameObject from Unity.

The SceneObject itself will have an ID that corresponds to its index in a c++ vector,
AND each child mesh of the SceneObject should also possess ID's corresponding to indices.


I've set up model loading from c#. What remains to do is to add a material struct to the mesh class,
and a shader class to the material struct therein. That way, when a mesh is drawn, the sceneObject configures transform data,
and the mesh pulls data (like object color) from its material to draw itself with the shader in the material. Or, we could make this easier and simply
assign the material/shader to the sceneObject itself, and limit sceneObjects to one mesh per SO. 



However, before you do anything else, the mesh should have a name assigned to it when it gets loaded, as a matter of convenience.

I've switched the c++ project over to use Common Language Runtime support (project->settings->general and c++->general)
It's important to note that this adds .Net framework as a dependancy of the c++ dll
Ergo, it CANNOT run on android in this state

So we treat it as if in dev mode.

TODO: Create a project called ImpunityEngine.Core
Which will store all the classes a user needs to avoid circular dependancies

key words:

create - creates a SceneObject, Light, or Model (as a sceneObject)
setPosition - sets the position of a SceneObject or Light by name or ID
setambient/setamb - id vec3 lightType
list sceneObj/lightType -print a list of objects
setAmbient - set ambient value
setDiffuse - set diffuse value
setSpecular  - set specular value
setMaxDistance - set max distance of light
cutOff  - set the angle of a spotlight
enable - enabled/disable a so/light
list - list a type sceneObject
save - save the scene with a name
scene/load - load scene from a directory
quit - quit the editor
select - select an object by index and type
 r axis degree - rotate an object x degrees around axis axis
 g axis dist - grab and object dist units of dist along axis axis
 tile x y - tile the textures on the material
 offset x y - offset the textures on the material
 swapdiffuse x- swap diffuse map with a texture of id x
 mat amb/diff/spec value - set the color of a particular channel
 mat shine - set shininess of material



 DONE: give key input to c# in the form of an array of ints, each of which corresponds to a value in an enum

 TODO: End dependance on the built-in camera script by giving control to c# class

 DONE: Load scenes from the topmost layer.
	-Impunity classes must be divested of their cyclical SceneObject property!

TODO: setRotation - sets the rotation of a sceneObject or Light by name/ID
TODO:  start, pause, and take off impunityClasses

TODO: Buttons, text, textfields, general GUI-ndc stuff
	-Button clicks can be detected by testing mouse coords against area of button

TODO:And perhaps uniforms, too



example 1: create pointLight
example 2: setPosition int(index) Vector3(position)  type(optional)
example 2b: setpos tree -1 6 -2.3
example 3: create model c:\someDirectory\myModel.obj
example 4:setdiff 2 0.6 0.4 0.4 spotlight
example 5: setspecular 1 .8 .8 .8 plight
example 6: enable tree false
example 7: enable 2 true plight



*******Goals of branch Refactor02*******
----------------------------------------------------
----------------------------------------------------
						---------------------
									-------

After giving it some thought, I've decided to change the three light types
to inheriting from a component class, which ImpunityClass will also inherit from.
This way, the scene object can have a list of components, Update()'ing each in its own
particular way, a la

foreach item in Components
	item.Update(this);

Meanwhile, in the component

Update(sceneObject so)
	pointLight.rotation = so.transform.rotation
	...

	or

	Update(sceneObject so)
		directionalLight.rotation = so.transform.rotation
		Bridge.SetDirectionLightTransform(...)

However, we need to be able to accomodate the fact that there are going to be 
empty sceneObjects - sceneObjects that don't correspond to any node, mesh, light, or
anything in the world of c++ -  they only exist to serve as a transform basis for a component.
In the c++ world, sceneObjects are really just a more organized version of the Model class.
They include setting all the uniforms for drawing the child meshes with particular shaders.
Therefore, it shouldn't be automatically assumed that a sceneObject should set its transform
for an object in c++'s vector of sceneObject.... on the other hand, we could simply tell c++
to create an empty sceneObject, which also allows c++ to do all the math involving the transform.

To further complicate the matter, they must never have cyclical relationships with their components. The sceneObject
can only exist in local scope for a component. ImpunityClasses will access other components via the sceneObject's
list of components with a method like sceneObject.GetComponent<someComponentType>();

Also, to add to my list of worries, the blue z arrow is pointing backward. Scaling should be done after rotation, or else
bad things happen. Finally, grabbing should be done along a LOCAL axis, not world axis. Therefore, they should translate in a local 
direction, rather than global direction.









